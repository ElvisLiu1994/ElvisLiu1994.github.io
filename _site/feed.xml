<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-09T11:08:50+08:00</updated><id>http://localhost:4000/</id><title type="html">Elvis Liu</title><subtitle>个人博客</subtitle><author><name>elvisliu</name></author><entry><title type="html">C++中的名字查找</title><link href="http://localhost:4000/2018/02/04/C++%E4%B8%AD%E7%9A%84%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE/" rel="alternate" type="text/html" title="C++中的名字查找" /><published>2018-02-04T00:00:00+08:00</published><updated>2018-02-04T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/04/C++%E4%B8%AD%E7%9A%84%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE</id><content type="html" xml:base="http://localhost:4000/2018/02/04/C++%E4%B8%AD%E7%9A%84%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE/">&lt;p&gt;今天在复习算法的时候，想用一个排序的模板类作为各种排序算法的基类，不同的类实现不同的sort函数，由于可能对于不同类型的数据进行排序，所以使用了模板方法，排序的数据类型为未知类型。&lt;/p&gt;

&lt;p&gt;模板类的实现如下所示：&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现的第一个算法为选择排序法，其实现方法如下：&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Selection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compile error
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;exch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compile error
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码在进行编译时出现有两处错误，其报错如下所示：
&lt;img src=&quot;/images/posts/name1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据编译器给出的提示信息，错误原因为在Selection类中没有找到less方法和exch方法！可是，Selection类继承自Sort类，明明在Sort类中定义了这两个方法啊？编译器还提示必须使用限定标识符以在所属的基类中找到此声明，即需要使用Sort&lt;T&gt;::less或者Sort&lt;T&gt;::exch来调用这两个方法，这样修改后确实没有报错了。&lt;/T&gt;&lt;/T&gt;&lt;/p&gt;

&lt;p&gt;这与C++的名字查找规则有关，下面将对C++中的名字查找规则进行总结。C++标准中对于模板类和非模板的普通类应用不同的查找规则，下面分别进行总结。&lt;/p&gt;

&lt;h4 id=&quot;普通类的名字查找过程&quot;&gt;普通类的名字查找过程&lt;/h4&gt;

&lt;p&gt;关键在于如何确定函数调用。确定函数调用在于以下四个步骤：
（1）首先确定进行函数调用的对象、引用或指针的静态类型。
（2）在该类中查找函数，如果找不到，就在直接基类中查找，如此循着类的继承链往上找，走到找到该函数或者查找完最后一个类。如果不能在类或者其相关基类中找到该名字，则调用是错误的。（也可能是非成员函数，这是假设没有同名的非成员函数）
（3）一旦找到了该名字，就进行常规类型检查，查看如果给定找到的定义，该函数调用是否合法。
（4）假定函数调用合法，编译器就生成代码。如果函数是虚函数且通过引用或指针调用，则编译器生成代码以确定根据对象的动态类型运行哪个函数版本，否则编译器生成代码直接调用函数。&lt;/p&gt;

&lt;p&gt;这里分析一道习题方便理解：给定下面的类层次，从VMI类内部可以不加限定地访问哪些继承成员？哪些继承成员需要限定？解释你的推理。&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;array&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Base::bar(int)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Derived1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Derived1::foo(char)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Derived2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Derived2::foo(int)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VMI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Derived1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Derived2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Derived2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 不会出错。但是调用的只会是Derived1中的bar函数，即会输出字符'B'
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Derived2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Derived1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里涉及到了多继承，虚继承以及普通继承，正好可以总结一下这些情况下编译器查找名字出现二义性的情况：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;对于普通继承，即VIM继承D1这种情况来说，VMI中定义的名字将会屏蔽掉基类中的名字，如果在使用该名字时，则会直接使用派生类中的名字，不再进行查找。&lt;/li&gt;
  &lt;li&gt;对于多继承，多继承情况下是最容易出现二义性的，如果上述代码中D1和D2都没有使用virtual继承，那么对于ival的使用也将会出现二义性，因为在VMI中找不到ival时，将会去查找D1与D2两棵基类树，由于D2中定义了ival则找到一个，但是D1中没有定义，将会继续向上查找，于是在Base中打到了一个ival，而这两个ival会产生二义性；对于函数来说，多继承中，不同基类定义了同名函数，即使它们的形参不同，那么也会产生二义性，而不会发生重载。因为名字查找总是以两个步骤发生，先找到一个匹配的声明（在这个例子中找到了两个匹配的声明，这导致二义性），然后编译器才确定找到的声明是否合法。&lt;/li&gt;
  &lt;li&gt;使用了虚继承后，二义性比多继承要少很多，如果在每个路径中，x表示同一虚基类成员，则没有二义性；如果在某个路径中x是虚基类的成员，而在另一路径中x是派生类的成员，也没有二义性（特定派生类实例的优先级高于共享虚基类实例）；如果沿每个继承路径x表示派生类的不同成员，则产生二义性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.对于ival，首先在VMI类里面查找，没有找到，那么会进行D1和D2进行查找， 沿D2路径中找到一个ival，沿D1的路径也找到一个，不过该ival是虚基类定义的，优先级比D2中定义的低，所以不会产生二义性，如果去掉virtual继承则会产生二义性。&lt;br /&gt;
2.对于cval，由于D1和D2中都有定义，则会产生二义性。&lt;br /&gt;
3.对于foo，D1和D2中都有定义，也会产生二义性。尽管参数不同，这里也不会发生重载。因为重载仅发生在同一个作用域中，虽然在查找中都找到了，但是它们仍然不属于同一个作用域。&lt;br /&gt;
4.对于boo，由于D1中有定义，D2中没有找到，向上找到Base虚基类中存在，但是优先级比D1中低，所以不会产生二义性。如果不是虚继承的话，那boo也会产生二义性。&lt;/p&gt;

&lt;p&gt;具体内容可以参考C++ primer第4版的第17章。&lt;/p&gt;

&lt;h4 id=&quot;模板类的名字查找过程&quot;&gt;模板类的名字查找过程&lt;/h4&gt;

&lt;p&gt;对于模板类，名字查找过程分为两个阶段：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模板定义阶段：&lt;/strong&gt;刚被定义时，只有模板中独立的名字（可以理解为与模板参数无关的名字）参与查找。
&lt;strong&gt;模板实例化阶段：&lt;/strong&gt;实例化非模板代码时，非独立的名字才参加查找。&lt;/p&gt;

&lt;p&gt;我们分析上面代码的过程便可以更好地解理。首先进入Selection模板的定义阶段，此时Selection的基类Sort&lt;T&gt;类依赖于参数模板T，所以是一个非独立的名字，在这个阶段对于Selection来说Sort&lt;T&gt;这个名字是不存在的，因为此时可能Sort&lt;T&gt;也还没有实例化，类型还不确定，所以Sort&lt;T&gt;虽然作为基类，但是编译器不会在此时进入基类进行名字的查找。于是less和exch这两个名字是无法在基类中找到的，但是此时编译器并不会出错，因为编译器会把它们当作非成员函数。&lt;/T&gt;&lt;/T&gt;&lt;/T&gt;&lt;/T&gt;&lt;/p&gt;

&lt;p&gt;当稍晚些时候，进行第二阶段时，编译器已经认为less和exch是非成员函数了，纵使此时Sort&lt;T&gt;::less和Sort&lt;T&gt;::exch已经可以查到了，但是编译器也不会这么做了。但是非成员函数又找不到，于是编译器报错了。&lt;/T&gt;&lt;/T&gt;&lt;/p&gt;

&lt;p&gt;这里的解决办法有两种：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一种是直接在Selection的模板定义里面调用less和exch时指定Sort&amp;lt;T::less和Sort&lt;T&gt;::exch，这样的话，在模板定义阶段，编译知道这两个方法应该去Sort&lt;T&gt;模板类中去查找，这样就可以在实例化阶段找到正确的函数。&lt;/T&gt;&lt;/T&gt;&lt;/li&gt;
  &lt;li&gt;另一种方法是使用this指针，尽管模板定义阶段没办法找到less和exch，但是如果使用this-&amp;gt;less()和this-&amp;gt;exch()，这就告诉了编译器，这两个方法是成员函数，不在Selection类就在它的基类里，到了模板实例化阶段，此时编译器知道查找的是一个成员函数，那么就会在Selection类中查，如果没有找到，就会去它的基类里面找，于是成功找到！&lt;/li&gt;
&lt;/ul&gt;</content><author><name>elvisliu</name></author><summary type="html">今天在复习算法的时候，想用一个排序的模板类作为各种排序算法的基类，不同的类实现不同的sort函数，由于可能对于不同类型的数据进行排序，所以使用了模板方法，排序的数据类型为未知类型。</summary></entry><entry><title type="html">空间金字塔池化与ROI池化</title><link href="http://localhost:4000/2018/02/03/%E9%87%91%E5%AD%97%E5%A1%94%E6%B1%A0%E5%8C%96%E4%B8%8EROI%E6%B1%A0%E5%8C%96/" rel="alternate" type="text/html" title="空间金字塔池化与ROI池化" /><published>2018-02-03T00:00:00+08:00</published><updated>2018-02-03T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/03/%E9%87%91%E5%AD%97%E5%A1%94%E6%B1%A0%E5%8C%96%E4%B8%8EROI%E6%B1%A0%E5%8C%96</id><content type="html" xml:base="http://localhost:4000/2018/02/03/%E9%87%91%E5%AD%97%E5%A1%94%E6%B1%A0%E5%8C%96%E4%B8%8EROI%E6%B1%A0%E5%8C%96/">&lt;h4 id=&quot;池化的作用&quot;&gt;池化的作用&lt;/h4&gt;

&lt;h4 id=&quot;空间金字塔池化&quot;&gt;空间金字塔池化&lt;/h4&gt;

&lt;h4 id=&quot;roi池化&quot;&gt;ROI池化&lt;/h4&gt;</content><author><name>elvisliu</name></author><summary type="html">池化的作用</summary></entry><entry><title type="html">cs231n 第二讲 图像分类</title><link href="http://localhost:4000/2018/02/03/cs231n%E7%AC%AC%E4%BA%8C%E8%AE%B2%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/" rel="alternate" type="text/html" title="cs231n 第二讲 图像分类" /><published>2018-02-03T00:00:00+08:00</published><updated>2018-02-03T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/03/cs231n%E7%AC%AC%E4%BA%8C%E8%AE%B2%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB</id><content type="html" xml:base="http://localhost:4000/2018/02/03/cs231n%E7%AC%AC%E4%BA%8C%E8%AE%B2%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/">&lt;h4 id=&quot;数据驱动方法&quot;&gt;数据驱动方法&lt;/h4&gt;

&lt;p&gt;基于规则的方法无法扩展到较大的数据集，针对不同类的图像可能需要制定不一样的判别规则，所以换一个角度，从数据出发。&lt;/p&gt;

&lt;p&gt;最简单的方法就是使用$k$NN算法，根据最近邻的几个图像对预测图像进么分类。关于$k$NN算法可以去看另一篇&lt;a href=&quot;../../02/kNN算法与kd树&quot;&gt;博客&lt;/a&gt;。但是这种方法在图像分类中基本不用，这里只是用来说明数据驱动方法的思想，即通过在数据在内在联系或者规律对未知图像进行分类。&lt;/p&gt;

&lt;h4 id=&quot;线性分类方法&quot;&gt;线性分类方法&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/linear2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参数W的每一行为一个分类模板，可以模拟该模板下不同像素点类型得分的高低；而偏置项b不直接参与像素点的计算，表示一些数据整体的信息，比如某一类的比重比较大时，它的b相应地也会比较大。如果从划分超平面来理解的话，W的每一行加上相应位置的b构成一个分类超平面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/linear3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/posts/linear4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>elvisliu</name></author><summary type="html">数据驱动方法</summary></entry><entry><title type="html">SVM支持向量机</title><link href="http://localhost:4000/2018/02/03/SVM%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/" rel="alternate" type="text/html" title="SVM支持向量机" /><published>2018-02-03T00:00:00+08:00</published><updated>2018-02-03T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/03/SVM%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA</id><content type="html" xml:base="http://localhost:4000/2018/02/03/SVM%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/">&lt;h4 id=&quot;简介&quot;&gt;简介&lt;/h4&gt;

&lt;p&gt;支持向量机是一种二类分类模型。它的基本模型是定义在特征空间上的间隔最大的线性分类器，间隔最大使它有别于感知机。支持向量机包括核技巧，这使它成为实质上的非线性分类器。支持向量机的学习策略就是间隔最大化，可形式化为一个求解凸二次规划的最优化算法。&lt;/p&gt;

&lt;p&gt;支持向量机一共可以分为三类，&lt;strong&gt;线性可分支持向量机、线性支持向量机、非线性支持向量机&lt;/strong&gt;。当数据线性可分时，通过硬间隔最大化，学习一个线性的分类器，即线性可分支持向量机；当训练数据接近线性可分时，通过软间隔最大化，也学习一个线性的分类器，即线性支持向量机；当训练数据不可分时，通过使用核技巧及软间隔最大化，学习非线性支持向量机。&lt;/p&gt;

&lt;h4 id=&quot;函数间隔和几何间隔&quot;&gt;函数间隔和几何间隔&lt;/h4&gt;

&lt;p&gt;一般来说，一个点距离分离超平面的远近可以表示分类预测的确信程度。在超平面$w \cdot x_i+b = 0$确定的情况下，$|w \cdot x_i+b|$能够相对地表示点$x$距离超平面的远近。而$w \cdot x_i+b$的符号与类标签$y_i$的符号是否一致能够表示分类是否正确。所以可用量$\hat{\gamma} = y_i(w \cdot x_i + b)$来表示分类的正确性及确信度，这就是函数间隔的概念。&lt;/p&gt;

&lt;p&gt;我们也可以从另一个方面理解函数间隔为什么可以用来表示确信度。在logistic回归中，我们使用$h_\theta(x) = \frac{1}{1+e^{-\theta^T x}}$来表示分类为正类的概率，这里的$\theta^T x$即与上面的$w \cdot x+b$相同，当它的值越大时，表示分类为正类的概率越大，所以从这个方面来解释，也可以说明函数间隔可以用来表示分类正确性及确信度。&lt;/p&gt;

&lt;p&gt;几何间隔需要用函数间隔除以$||w||$，即$\frac{y_i(w \cdot x_i + b)}{||w||}$，或者$\gamma = y_i\left(\frac{w}{||w||} \cdot x_i + \frac{b}{||w||}\right)$。从几何角度来看，几何间隔为点到直线的垂直距离。我们也可以从向量的角度理解这两个距离，对于直线而言，向量(w,b)为直线$wx+b=0$的法向量，点$\vec x$与直线的距离为其到法向量的投影与法向量模长的乘积，当法向量为单位向量时，该值表示几何距离。&lt;/p&gt;

&lt;h4 id=&quot;线性可分支持向量机最大几何间隔法&quot;&gt;线性可分支持向量机–最大几何间隔法&lt;/h4&gt;

&lt;p&gt;假设数据是线性可分的，SVM的思想则是寻找一个划分超平面，使得所有训练数据到该平面的最小几何间隔最大。即：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\max_{w,b} \quad &amp;\gamma \\
s.t. \quad &amp;y_i\left(\frac{w}{||w||} \cdot x_i + \frac{b}{||w||}\right) \geq \gamma, \quad i = 1,2,\cdots,N
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;考虑到几何间隔与函数间隔之间的关系，我们可以将上式改写为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\max_{w,b} \quad &amp;\frac{\hat{\gamma}}{||w||} \\
s.t. \quad &amp;y_i\left(w \cdot x_i + b\right) \geq \hat{\gamma}, \quad i = 1,2,\cdots,N
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;我们知道，实际上函数间隔$\hat{\gamma}$的取值并不会影响最优化问题的解。比如对上式中约束部分左右两边同时除以$\hat{\gamma}$，那么约束不等式变为$y_i\left(\frac{w}{\hat{\gamma}} \cdot x_i + \frac{b}{\hat{\gamma}}\right) \geq 1$，然后我们使用新的$w_0, b_0$来替代上式中的线性表达式，即令$w_0 = \frac{w}{\hat{\gamma}}$。则有$y_i\left(w_0 \cdot x_i + b_0\right) \geq 1$，而在目标函数中也用$w_0$进行替代则有$max \quad \frac{\hat{\gamma}}{||w_0|| \hat{\gamma}}$ 则目标式可以化简为最大化$\frac{1}{||w_0||}$，再统一用$w$替代$w_0$，同时注意到最大化$\frac{1}{||w||}$和最小化$\frac{1}{2}||w^2||$是等价的，这里主要是为了统一最优化问题的形式，而除2是为了方便求导计算，于是就得到了标准的&lt;strong&gt;线性可分支持向量机&lt;/strong&gt;学习的最优化问题&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\min_{w,b} \quad &amp;\frac{1}{2}||w||^2 \\
s.t. \quad &amp;y_i\left(w \cdot x_i + b\right) - 1 \geq 0, \quad i = 1,2,\cdots,N
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;这是一个凸二次规划问题，我们可以直接用求解约束最优化问题的方法来进行求解参数，而不使用梯度下降法这样的迭代求解方法。&lt;/p&gt;

&lt;h6 id=&quot;学习的对偶算法&quot;&gt;学习的对偶算法&lt;/h6&gt;</content><author><name>elvisliu</name></author><summary type="html">简介</summary></entry><entry><title type="html">$k$NN算法与$kd$树</title><link href="http://localhost:4000/2018/02/02/kNN%E7%AE%97%E6%B3%95%E4%B8%8Ekd%E6%A0%91/" rel="alternate" type="text/html" title="$k$NN算法与$kd$树" /><published>2018-02-02T00:00:00+08:00</published><updated>2018-02-02T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/02/kNN%E7%AE%97%E6%B3%95%E4%B8%8Ekd%E6%A0%91</id><content type="html" xml:base="http://localhost:4000/2018/02/02/kNN%E7%AE%97%E6%B3%95%E4%B8%8Ekd%E6%A0%91/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#优缼点&quot; id=&quot;markdown-toc-优缼点&quot;&gt;优缼点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三要素&quot; id=&quot;markdown-toc-三要素&quot;&gt;三要素&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kd树&quot; id=&quot;markdown-toc-kd树&quot;&gt;$kd$树&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;优缼点&quot;&gt;优缼点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;优点：没有显示的训练过程，理论简单，实现方便；可用于非线性分类；对数据没有假设；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;缺点：对噪声点比较敏感；内存开销大；计算开销大；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;三要素&quot;&gt;三要素&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;距离度量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设特征空间$\chi$是$n$维实数向量空间$R^n$，$x_i,x_j\in \chi,\quad x_i=(x_i^{(1)},x_i^{(2)},\cdots,x_i^{(n)})^T, \quad x_j=(x_j^{(1)},x_j^{(2)},\cdots,x_j^{(n)})^T$, $x_i,x_j$的$L_p$距离定义为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_p(x_i,x_j)=\left(\sum_{l=1}^n|x_i^{(l)}-x_j^{(l)}|^p\right) ^{\frac{1}{p}}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;$k$值的选择&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$k$值的选择会对$k$近邻法的结果产生重大影响。&lt;/p&gt;

&lt;p&gt;如果选择较小的$k$值，就相当于较小的领域中的训练实例进行预测，缺点是预测结果会对近邻的实例点非常敏感。如果邻近的实例点恰巧是噪声，预测就会出错。换句话说，$k$值的减小就意味着整体模型变得复杂，容易过拟合。&lt;/p&gt;

&lt;p&gt;如果选择较大的$k$值，在较大的邻域中进行预测，可以减少学习的估计误差，缺点是较远的点也会对预测起作用，使预测发生错误。这时整体的模型变得简单。&lt;/p&gt;

&lt;p&gt;如果$k=N$，那么无论输入实例是什么，都将简地预测它属于训练集中实例最多的类。这时模型过于简单，完全忽略训练实例中的大量有用信息。在应用中一般使用交叉验证法选择合适的$k$值。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分类决策规则&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般采用多数表决，属于经验风险最小化模型。&lt;/p&gt;

&lt;h4 id=&quot;kd树&quot;&gt;$kd$树&lt;/h4&gt;

&lt;p&gt;$kd$树的本质是多维空间中的平衡二叉树。&lt;/p&gt;</content><author><name>elvisliu</name></author><category term="机器学习" /><summary type="html"></summary></entry><entry><title type="html">数学基础</title><link href="http://localhost:4000/2018/02/01/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/" rel="alternate" type="text/html" title="数学基础" /><published>2018-02-01T00:00:00+08:00</published><updated>2018-02-01T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/01/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80</id><content type="html" xml:base="http://localhost:4000/2018/02/01/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#高等数学&quot; id=&quot;markdown-toc-高等数学&quot;&gt;高等数学&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#连续可导可微&quot; id=&quot;markdown-toc-连续可导可微&quot;&gt;连续、可导、可微&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#偏导数&quot; id=&quot;markdown-toc-偏导数&quot;&gt;偏导数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#方向导数&quot; id=&quot;markdown-toc-方向导数&quot;&gt;方向导数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#梯度&quot; id=&quot;markdown-toc-梯度&quot;&gt;梯度&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最优化问题&quot; id=&quot;markdown-toc-最优化问题&quot;&gt;最优化问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#线性代数&quot; id=&quot;markdown-toc-线性代数&quot;&gt;线性代数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#概率分析&quot; id=&quot;markdown-toc-概率分析&quot;&gt;概率分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;高等数学&quot;&gt;高等数学&lt;/h1&gt;

&lt;h4 id=&quot;连续可导可微&quot;&gt;连续、可导、可微&lt;/h4&gt;

&lt;p&gt;函数在某一点连续的充要条件是函数在该点的函数值，等于该点的极限值；即$f(x_0)=\lim_{x \to x_0}f(x)$。或者说该点的左极限等于右极限。&lt;/p&gt;

&lt;p&gt;可导的充要条件是函数在此点连续，并且左导数等于右导数。在多元函数中，可导是指所有偏导数存在。&lt;/p&gt;

&lt;p&gt;在一元函数中，可微与可导是等价的，但是多元函数中，可微一定可导，但可导不一定可微。
因为可导是指各个坐标轴方向的切线可导，例如圆锥的顶点，任意方向的方向导数都存在，所以是可导的（因为导必须指定一个方向进行求导，即求变化率），但是该点并不可微，可微要求能用切面去拟合曲面，或者切线去拟合曲线。如果该函数在该点具有一阶连续偏导数，即偏导数不仅存在，而且连续，那么在该点是可微的。一阶偏导连续，说明该函数没有折点，断点，洞点等情况，因为如果一阶偏导数连续，即在无限接近该点的邻域内，任意方向偏导数的极限都相等（连续的定义），那么就可以使用一个切面去拟合该部分曲面了，即可微。&lt;/p&gt;

&lt;p&gt;可微的数学定义：如果在$x_0$到$x_0+\Delta x$区间内，函数的增量&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta y = f(x_0+\Delta x) - f(x_0)&lt;/script&gt;

&lt;p&gt;可以表示为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta y = A\Delta x + o(\Delta x)&lt;/script&gt;

&lt;p&gt;其中A是常数，那么称$y=f(x)$在点$x_0$是可微的，而$A\Delta x$叫做函数$y = f(x)$在点$x_0$的微分，记作$dy$，即&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;dy = Adx&lt;/script&gt;

&lt;p&gt;A即为该点切线的斜率。也可以叫做导数。&lt;/p&gt;

&lt;p&gt;从上面的定义可以联想在多元情况下，即是用切面去拟合曲面，才能叫做可微。&lt;/p&gt;

&lt;p&gt;（方向导是指某一个方向函数值的变化率，该方向的切线称为该方向的偏微分，所有的切线组成的切面为全微分，）&lt;/p&gt;

&lt;h4 id=&quot;偏导数&quot;&gt;偏导数&lt;/h4&gt;

&lt;p&gt;导数是对应一元函数的，即一元函数的变化率。而偏导数是对应于多元函数的，反应的是函数沿坐标轴方向的变化率。比如我们有函数 $z=f(x,y)$，其在$x$和$y$方向上的偏导数为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_x(x_0, y_0)=\lim_{\Delta x \to 0} \frac{f(x_0+\Delta x, y_0) - f(x_0, y_0)}{\Delta x}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_y(x_0, y_0)=\lim_{\Delta y \to 0} \frac{f(x_0, y_0+\Delta y) - f(x_0, y_0)}{\Delta y}&lt;/script&gt;

&lt;p&gt;偏导数是一个标题值。&lt;/p&gt;

&lt;h4 id=&quot;方向导数&quot;&gt;方向导数&lt;/h4&gt;

&lt;p&gt;方向导数即函数$f(x,y)$在点$p(x_0,y_0)$沿任意方向$l$的变化率。方向导数也是对应于多元函数。方向导数是一个标量值。所有的导数都是标量值。假设$p’(x_0+\Delta x,y_0+\Delta y)$也是直线$l$上的一点，则函数在$l$方向上的方向导数为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial f}{\partial l} = \lim_{\rho \to 0} \frac{f(x_0+\Delta x, y_0+\Delta y) - f(x_0,y_0)}{\rho}&lt;/script&gt;

&lt;p&gt;其中$\rho$为点$p$和点$p’$之间的距离。只要函数在某一点连续可微，那么函数在该点沿任意方向的方向导数都存在。但是反过来不成立。&lt;/p&gt;

&lt;p&gt;上面所说的偏导数是方向导数的一种特例，也有的地方直接称方向导数为某方向上的偏导数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/piandaoshu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;梯度&quot;&gt;梯度&lt;/h4&gt;

&lt;p&gt;假设一个函数在某一点可微，即它任意方向的偏导数都存在并且偏导连续，这就引出了梯度了定义：梯度是一个矢量，其方向上的方向导数最大，其大小正好是此最大方向导数。&lt;/p&gt;

&lt;p&gt;在这里有两个疑问：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;为什么所有方向导数中只会存在一个最大值？而不是有多个最大值，或者没有最大值？&lt;/li&gt;
  &lt;li&gt;这个最大值在哪个方向取得？值是多少？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可微说明该点所有方向的切线共面，那么在该切面中，必定有且只有一个斜率最大的切线（该斜率指该切线与xy平面的夹角形成的斜率），该方向函数值增长得最快。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/tidu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[1]&lt;a href=&quot;https://blog.csdn.net/huxiaokang1234/article/details/52550999&quot;&gt;https://blog.csdn.net/huxiaokang1234/article/details/52550999&lt;/a&gt;
[2]&lt;a href=&quot;http://netedu.xauat.edu.cn/jpkc/netedu/jpkc/gdsx/homepage/5jxsd/51/513/5308/530807.htm&quot;&gt;http://netedu.xauat.edu.cn/jpkc/netedu/jpkc/gdsx/homepage/5jxsd/51/513/5308/530807.htm&lt;/a&gt;
[3]&lt;a href=&quot;https://www.zhihu.com/question/23468713?sort=created&quot;&gt;https://www.zhihu.com/question/23468713?sort=created&lt;/a&gt;
[4]&lt;a href=&quot;https://www.zhihu.com/question/36301367&quot;&gt;https://www.zhihu.com/question/36301367&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;最优化问题&quot;&gt;最优化问题&lt;/h1&gt;

&lt;h1 id=&quot;线性代数&quot;&gt;线性代数&lt;/h1&gt;

&lt;h1 id=&quot;概率分析&quot;&gt;概率分析&lt;/h1&gt;</content><author><name>elvisliu</name></author><category term="[&quot;机器学习&quot;, &quot;深度学习&quot;]" /><summary type="html"></summary></entry><entry><title type="html">内部类</title><link href="http://localhost:4000/2018/01/15/%E5%86%85%E9%83%A8%E7%B1%BB/" rel="alternate" type="text/html" title="内部类" /><published>2018-01-15T00:00:00+08:00</published><updated>2018-01-15T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/15/%E5%86%85%E9%83%A8%E7%B1%BB</id><content type="html" xml:base="http://localhost:4000/2018/01/15/%E5%86%85%E9%83%A8%E7%B1%BB/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#创建内部类&quot; id=&quot;markdown-toc-创建内部类&quot;&gt;创建内部类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#内部类与向上转型&quot; id=&quot;markdown-toc-内部类与向上转型&quot;&gt;内部类与向上转型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#在方法和作用域内的内部类&quot; id=&quot;markdown-toc-在方法和作用域内的内部类&quot;&gt;在方法和作用域内的内部类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以将一个类的定义放在另一个类的定义内部，这就是内部类。内部类是一种非常有用的特性，因为它允许你把一些逻辑相关的类组织在一起，并控制位于内部的类的可视性。&lt;/p&gt;

&lt;h3 id=&quot;创建内部类&quot;&gt;创建内部类&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;创建内部类的方式即把类的定义置于外围类的里面，如果在外部类的非静态方法之外的任意位置创建某个内部类的对象，那么必须地指明这个对象的类型：&lt;code class=&quot;highlighter-rouge&quot;&gt;OuterClassName.InnerClassName&lt;/code&gt;。内部类拥有其外围类的所有元素的访问权限。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内部类中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;OuterClassName.this&lt;/code&gt;获取外部类的对象引用，外部类对象使用&lt;code class=&quot;highlighter-rouge&quot;&gt;outerObj.new InnerClassName()&lt;/code&gt;创建内部类对象。&lt;/p&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Outer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOuterObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Outer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Outer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Outer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOuterObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// out1与out指向同一个对象&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;内部类与向上转型&quot;&gt;内部类与向上转型&lt;/h3&gt;

&lt;p&gt;当将内部类向上转型为其基类，尤其是转型为一个接口的时候，内部类就有了用武之地。（从实现了某个接口的对象，得到对此接口的引用，与向上转型为这个对象的基类，实质上是一样的。）将内部类实现某个接口，通过外部类的方法返回内部类的对象，即指向基类或接口的引用，所以能够很方便地隐藏实现细节。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readLable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parcel4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PContents&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PDestination&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PDestination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whereTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whereTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readLable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Destination&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PDestination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contents&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PContents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在上面的例子中，&lt;code class=&quot;highlighter-rouge&quot;&gt;Parcel4&lt;/code&gt;中增加了两个内部类，分别实现了两个接口，同时，提供了两个方法返回两个接口的引用，这样，在外部，我们无法知道这两个接口的实现，只能通过外部类提供的方法获得两个接口的引用，完全隐藏了实现的细节。&lt;/p&gt;

&lt;h3 id=&quot;在方法和作用域内的内部类&quot;&gt;在方法和作用域内的内部类&lt;/h3&gt;

&lt;p&gt;前面介绍的都是“平凡的”内部类，简单并且容易理解。然而，内部类的语法覆盖了大量其他的更加难以理解的技术。例如，可以在一个方法里面或者在任意的作用域内定义内部类。这么做有两个理由：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如前所示，你实现了某类型的接口，于是可以创建并返回对其的引用。&lt;/li&gt;
  &lt;li&gt;你要解决一个复杂的问题，想创建一个类来辅助你的解决方案，但是又不希望这个类是公共可用的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在后面的例子中，先前的代码将被修改，以用来实现：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;一个定义在方法中的类。&lt;/li&gt;
  &lt;li&gt;一个定义在作用域内的类，此作用域在方法的内部。&lt;/li&gt;
  &lt;li&gt;一个实现接口的匿名类。&lt;/li&gt;
  &lt;li&gt;一个匿名类，它扩展了有非默认构造器的类。&lt;/li&gt;
  &lt;li&gt;一个匿名类，它执行字段初始化。&lt;/li&gt;
  &lt;li&gt;一个匿名类，它通过实例初始化实现构造（匿名类不可能有构造器）&lt;/li&gt;
&lt;/ol&gt;</content><author><name>elvisliu</name></author><category term="Java" /><summary type="html"></summary></entry><entry><title type="html">多态</title><link href="http://localhost:4000/2018/01/11/%E5%A4%9A%E6%80%81/" rel="alternate" type="text/html" title="多态" /><published>2018-01-11T00:00:00+08:00</published><updated>2018-01-11T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/11/%E5%A4%9A%E6%80%81</id><content type="html" xml:base="http://localhost:4000/2018/01/11/%E5%A4%9A%E6%80%81/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#方法调用绑定&quot; id=&quot;markdown-toc-方法调用绑定&quot;&gt;方法调用绑定&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#缺陷无法覆盖私有方法&quot; id=&quot;markdown-toc-缺陷无法覆盖私有方法&quot;&gt;缺陷：无法覆盖私有方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#缺陷无法覆盖域与静态方法&quot; id=&quot;markdown-toc-缺陷无法覆盖域与静态方法&quot;&gt;缺陷：无法覆盖域与静态方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#构造器和多态&quot; id=&quot;markdown-toc-构造器和多态&quot;&gt;构造器和多态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#协变返回类型&quot; id=&quot;markdown-toc-协变返回类型&quot;&gt;协变返回类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在面向对象有程序设计语言中，&lt;code class=&quot;highlighter-rouge&quot;&gt;多态&lt;/code&gt;是继&lt;code class=&quot;highlighter-rouge&quot;&gt;数据抽象(封装)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;继承&lt;/code&gt;之后的第三种基本特征。&lt;code class=&quot;highlighter-rouge&quot;&gt;封装&lt;/code&gt;通过合并特征和行为来创建新的数据类型。&lt;code class=&quot;highlighter-rouge&quot;&gt;多态&lt;/code&gt;则是基于&lt;code class=&quot;highlighter-rouge&quot;&gt;继承&lt;/code&gt;衍生出来的特性,它的作用则是消除类型之间的耦合关系。&lt;/p&gt;

&lt;h3 id=&quot;方法调用绑定&quot;&gt;方法调用绑定&lt;/h3&gt;

&lt;p&gt;将一个方法调用同一个方法主体(代码实现)关联起来被称作绑定。若在程序执行前进行绑定（如果有的话，由编译器和连接程序实现）叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;前期绑定&lt;/code&gt;。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;只有一种方法调用，那就是前期绑定。而&lt;code class=&quot;highlighter-rouge&quot;&gt;后期绑定&lt;/code&gt;的含义就是在运行时根据对象的类型进行绑定，也叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;动态绑定&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;运行时绑定&lt;/code&gt;。如果一种语言想实现后期绑定，就必须具有某种机制，以便在运行时能判断对象的类型，从而调用恰当的方法。也就是说，编译器一直不知道对象的类型，但是方法调用机制能找到正确的方体，并加以调用。&lt;/p&gt;

&lt;p&gt;Java中除了&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;方法和&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;方法（&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;方法属于&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;方法）之外，其他所有的方法都是后期绑定。&lt;/p&gt;

&lt;h3 id=&quot;缺陷无法覆盖私有方法&quot;&gt;缺陷：无法覆盖私有方法&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrivateOverride&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;private f()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PrivateOverride&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;po&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;po&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Derived&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrivateOverride&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;public f()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*输出

private f()

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我们期望的输出是&lt;code class=&quot;highlighter-rouge&quot;&gt;public f()&lt;/code&gt;，但是由于&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;方法被自动认为是&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;方法，而且对导出类是屏蔽的。因此，&lt;code class=&quot;highlighter-rouge&quot;&gt;Derived&lt;/code&gt;类中的&lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt;方法就是一个全新的方法。&lt;/p&gt;

&lt;h3 id=&quot;缺陷无法覆盖域与静态方法&quot;&gt;缺陷：无法覆盖域与静态方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;只有方法的调用可以是多态的，任何域访问操作都将由编译器解析，因此不是运行时绑定的，即不是多态的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;静态方法是与类，而并非与单个的对象相关联的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;构造器和多态&quot;&gt;构造器和多态&lt;/h3&gt;

&lt;p&gt;构造器并不具有多态性，它们实际是&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;方法，只不过该&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;声明是隐式的。&lt;/p&gt;

&lt;h3 id=&quot;协变返回类型&quot;&gt;协变返回类型&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Grain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Grain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wheat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Grain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Wheat&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Grain&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Grain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WheatMill&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Wheat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wheat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CovariantReturn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Grain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WheatMill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 输出
Grain
Wheat
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;导出类在覆盖基类的方法时，可以返回基类方法返回类型的导出类型。&lt;/p&gt;</content><author><name>elvisliu</name></author><category term="Java" /><summary type="html"></summary></entry><entry><title type="html">final关键字</title><link href="http://localhost:4000/2018/01/08/fianl%E5%85%B3%E9%94%AE%E5%AD%97/" rel="alternate" type="text/html" title="final关键字" /><published>2018-01-08T00:00:00+08:00</published><updated>2018-01-08T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/08/fianl%E5%85%B3%E9%94%AE%E5%AD%97</id><content type="html" xml:base="http://localhost:4000/2018/01/08/fianl%E5%85%B3%E9%94%AE%E5%AD%97/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#final数据&quot; id=&quot;markdown-toc-final数据&quot;&gt;final数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final参数&quot; id=&quot;markdown-toc-final参数&quot;&gt;final参数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final方法&quot; id=&quot;markdown-toc-final方法&quot;&gt;final方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final与private关键字&quot; id=&quot;markdown-toc-final与private关键字&quot;&gt;final与private关键字&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final类&quot; id=&quot;markdown-toc-final类&quot;&gt;final类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final关键字的好处&quot; id=&quot;markdown-toc-final关键字的好处&quot;&gt;final关键字的好处&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#不可变类&quot; id=&quot;markdown-toc-不可变类&quot;&gt;不可变类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据上下文环境，Java的关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;的含义存在着细微的区别，但通常它指的是“这是无法改变的。” &lt;br /&gt;
&lt;br /&gt;
下面将讨论&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;的三种情况：&lt;code class=&quot;highlighter-rouge&quot;&gt;数据&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;方法&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;类&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;final数据&quot;&gt;final数据&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;修饰数据时，可以修饰&lt;code class=&quot;highlighter-rouge&quot;&gt;成员变量&lt;/code&gt;也可以修饰&lt;code class=&quot;highlighter-rouge&quot;&gt;局部变量&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;只能修饰成员变量，不能修饰局部变量），修饰局部变量时，表示仅在该方法或代码块内部是不可变的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;数据块恒定不变有两种情况：
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;一个永不改变的&lt;code class=&quot;highlighter-rouge&quot;&gt;编译时常量&lt;/code&gt;。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;public final int v = 2;&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;public static final int V = 2&lt;/code&gt;; &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;li&gt;一个在运行时被初始化的值，而你不希望它被改变。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;public final v = rand.nextInt(100);&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;public static final V = rand.nextInt(100)&lt;/code&gt;；它们整个生命周期中，始终保持与初始化时的随机值保持一致，而不会改变；但是上面两条语句的区别在于，对于每一次生成的新的对象，&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;的值可能都会被初始化为不同的值，但&lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt;的值只会被初始化一次。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;修饰&lt;code class=&quot;highlighter-rouge&quot;&gt;基本数据类型&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;引用类型&lt;/code&gt;数据时也有不同的含义：
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;当修饰&lt;code class=&quot;highlighter-rouge&quot;&gt;基本数据类型时&lt;/code&gt;，其值不能被修改，对于&lt;code class=&quot;highlighter-rouge&quot;&gt;编译时常量&lt;/code&gt;只能使用基本数据类型。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;li&gt;当修饰&lt;code class=&quot;highlighter-rouge&quot;&gt;引用类型&lt;/code&gt;时，它表示该引用指向的存储空间地址不变，即无法指向其他的对象，但是对象其自身是可以修改的。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Java允许生成&lt;code class=&quot;highlighter-rouge&quot;&gt;空白final&lt;/code&gt;，所谓空白final是指被声明为final但又未给定初值的域，但是编译器都确保空白final在使用前必须被初始化。这样做有个好处是：一个类中的final域可以做到根据对象而有所不同，却又保持其恒定不变的特性。例如：
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Poppet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Poppet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  

 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlankFinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Initialized final&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Blank final&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Poppet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Blank final&lt;/span&gt;
    
     &lt;span class=&quot;c1&quot;&gt;// Blank finals MUST be initialized in the constructor;&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BlankFinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Poppet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BlankFinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Poppet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BlankFinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BlankFinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;final参数&quot;&gt;final参数&lt;/h3&gt;

&lt;p&gt;Java允许在参数列表中以声明的方式将参数指明为final。这意味着无法在方法中更改参数，其参数是基本类型，则无法修改其值，如果是引用类型，则无法修改其指向，但能修改对象本身。这一特性主要用来向匿名内部类传递数据。&lt;/p&gt;

&lt;p&gt;解释一下，为什么局部内部类(包括匿名内部类)使用外部的参数时，需要将参数修饰为&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnoInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addXYZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Outer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnoInner&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAnnoInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnoInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addXYZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// public void changeY(){y+=1} //这个函数无法修改外部环境的自由变量Y&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;；&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是因为Java在实现匿名内部类的时候，把外部环境方法的x和y局部变量，拷贝了一份到匿名内部类里，如下代码所示：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnoInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addXYZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Outer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnoInner&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAnnoInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnoInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//编译器相当于拷贝了外部自由变量x的一个副本到匿名内部类里。&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//编译器相当于拷贝了外部自由变量y的一个副本到匿名内部类里。&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addXYZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么这样就造成了内部类与外部环境使用的数据不同步的问题，如果在内部类里面修改数据，不会反应到外部环境中来，(如果是引用类型，修改引用指向的对象内容是没关系的，只是不能修改引用的指向)，在外部环境修改数据也不会反应到内部类中去，所以Java直接&lt;code class=&quot;highlighter-rouge&quot;&gt;禁止修改数据&lt;/code&gt;，即必须将内部类使用的数据设置为final。其实其他语言，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;scala&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt;都没有这个限制，它们将数据拷贝到内部类时，先将数据进行了一层封装，即封装成一个对象，再传入进去：&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TryUsingAnonymousClassInScala$$anonfun$1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractFunction0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mcV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apply$mcV$sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply$mcV$sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Predef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BoxesRunTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxToInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TryUsingAnonymousClassInScala$$anonfun$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TryUsingAnonymousClassInScala&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;$outer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number$2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到&lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;也是通过构造方法的参数传入的，但是与Java的不同是这里的number不是直接传入的，是被&lt;code class=&quot;highlighter-rouge&quot;&gt;IntRef&lt;/code&gt;包装了一层然后才传入的。对number的值修改也是通过包装类进行的：&lt;code class=&quot;highlighter-rouge&quot;&gt;this.number$2.elem = 456;&lt;/code&gt;，外部如果修改number也是通过包装类进行修改。这就是利用final修饰引用的特性：不能修改包装类的指向，但是能修改包装类里面的内容，这样就达到了修改number的指向的问题，就算number是一个引用类型，也是可以改变的，因为内外维护的是同一个引用。在内部类里面改了引用里面的引用，外部的引用里面的引用也会改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是，在&lt;code class=&quot;highlighter-rouge&quot;&gt;JDK8&lt;/code&gt;之后，java引入了&lt;code class=&quot;highlighter-rouge&quot;&gt;effctive final&lt;/code&gt;的概念，如果代码里面没有对外部数据进行修改，那么也可以不写final修饰，编译器会自动添加final关键字&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;final方法&quot;&gt;final方法&lt;/h3&gt;

&lt;p&gt;使用&lt;strong&gt;final&lt;/strong&gt;方法的原因有两个：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;把方法锁定，以防任何继承类修改它的含义。这是出于设计的考虑，想要确保在继承中使方法行为保持不变，并且不会被覆盖。&lt;/li&gt;
  &lt;li&gt;第二个原因是为了效率，早期的Java实现中，对于final方法的实现类似于内联函数，在调用处直接进行参数入栈，并展开调用代码，消除方法调用带来的开销。但是，如果一个方法很大，可能看不到任何性能提高。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在最近的Java版本中，建议不再使用final来处理效率问题，这些都应该交给编译器和JVM去处理。只有明确禁止覆盖方法时，才将方法设置成final&lt;/p&gt;

&lt;h3 id=&quot;final与private关键字&quot;&gt;final与private关键字&lt;/h3&gt;

&lt;p&gt;类中所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;private方法&lt;/code&gt;都隐式地指定为是final的。由于无法取用private方法，也就无法覆盖它。可以对private方法添加final修饰词，但这并不能给该方法增加任何额外的意义。&lt;/p&gt;

&lt;p&gt;但是，如果你试图覆盖一个private方法，编译器也不会给出错误信息，这是因为private方法本身是不可见的，所以在导出类中同名的private方法仅仅是一个新的方法，与父类的方法没有任何关系。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WithFinals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WithFinals.f()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WithFinals.g()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OverridingPrivate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WithFinals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OverridingPrivate.f()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OverridingPrivate.g()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OverridingPrivate2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OverridingPrivate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OverridingPrivate2.f()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OverridingPrivate2.g()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OverridingPrivate2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OverridingPrivate2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;OverridingPrivate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// But you can't call the methods:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//! op.f();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//! op.g();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;WithFinals&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//! wf.f();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//! wf.g();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;final类&quot;&gt;final类&lt;/h3&gt;

&lt;p&gt;当将某个类的整体定义为final时，就表明了你不打算继承该类，而且也不允许别人这样做。换句话说，你不希望该类有子类。&lt;/p&gt;

&lt;p&gt;请注意，final类的域可以根据个人的意愿选择为是或者不是final。不论类是否被定义为final，相同的规则都适用于定义为final的域。然而，由于final类禁止继承，所以final类中所有的方法都隐式指定为final的，因为无法覆盖它们。&lt;/p&gt;

&lt;h3 id=&quot;final关键字的好处&quot;&gt;final关键字的好处&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;final关键字某些条件下，能提高性能。JVM能缓存final变量。&lt;/li&gt;
  &lt;li&gt;final变量可以在多线程环境下共享，而不用担心同步的问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;不可变类&quot;&gt;不可变类&lt;/h3&gt;

&lt;p&gt;这里顺带提一下不可变类：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;类添加final修饰，保证不可被继承。&lt;/li&gt;
  &lt;li&gt;保证所有成员变量必须私有，并且加上final修饰符&lt;/li&gt;
  &lt;li&gt;不提供改变成员变量的方法，包括setter&lt;/li&gt;
  &lt;li&gt;通过构造器初始化所有成员，进行深拷贝&lt;/li&gt;
&lt;/ul&gt;</content><author><name>elvisliu</name></author><category term="Java" /><category term="关键字" /><summary type="html"></summary></entry><entry><title type="html">云主机操作记录</title><link href="http://localhost:4000/2018/01/02/%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="云主机操作记录" /><published>2018-01-02T00:00:00+08:00</published><updated>2018-01-02T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/02/%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/2018/01/02/%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jdk安装&quot; id=&quot;markdown-toc-jdk安装&quot;&gt;JDK安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#python相关安装&quot; id=&quot;markdown-toc-python相关安装&quot;&gt;Python相关安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#apache2服务器安装&quot; id=&quot;markdown-toc-apache2服务器安装&quot;&gt;Apache2服务器安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tomcat85安装&quot; id=&quot;markdown-toc-tomcat85安装&quot;&gt;Tomcat8.5安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jdk安装&quot;&gt;JDK安装&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;从 &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;官网&lt;/a&gt; 下载官方安装包，下载的版本是&lt;code class=&quot;highlighter-rouge&quot;&gt;JDK8&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解压，然后移动到&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;目录下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;配置环境变量，在文件尾部添加:
    &lt;blockquote&gt;

      &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/loca/jdk1.8.0_144

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt;显示如下：
    &lt;blockquote&gt;
      &lt;center&gt;
&lt;img src=&quot;/images/posts/aliyun1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/center&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;python相关安装&quot;&gt;Python相关安装&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu 16.04 LTS&lt;/code&gt;自带有&lt;code class=&quot;highlighter-rouge&quot;&gt;python2&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这里我们先安装&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3&lt;/code&gt;，并升级到最新版本：&lt;/p&gt;
    &lt;blockquote&gt;

      &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install python3-pip

pip3 install &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;apache2服务器安装&quot;&gt;Apache2服务器安装&lt;/h3&gt;

&lt;p&gt;直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install apache2&lt;/code&gt;即可完成安装，然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;service apache2 start&lt;/code&gt;开启服务，浏览器输入网址&lt;code class=&quot;highlighter-rouge&quot;&gt;47.94.202.241&lt;/code&gt;查看到apache欢迎页，则说明安装成功。&lt;/p&gt;

&lt;p&gt;apache的配置路径为&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;tomcat85安装&quot;&gt;Tomcat8.5安装&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;从 &lt;a href=&quot;http://tomcat.apache.org/download-80.cgi&quot;&gt;官网&lt;/a&gt; 下载二进制包，下载的版本是&lt;code class=&quot;highlighter-rouge&quot;&gt;8.5.24&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解压后移动至&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;路径下，最终目录即&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/apache-tomcat-8.5.24&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进入&lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt;目录下，&lt;code class=&quot;highlighter-rouge&quot;&gt;vim startup.sh&lt;/code&gt;，在最后一行前面添加&lt;code class=&quot;highlighter-rouge&quot;&gt;CATALINA_HOME=/usr/local/apache-tomcat-8.5.24&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进入阿里云控制台，安全组，添加规则，将8080端口的入方向打开。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>elvisliu</name></author><category term="重要记录" /><category term="linux ubuntu aliyun 阿里云" /><summary type="html"></summary></entry></feed>